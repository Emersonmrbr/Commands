@page "/git/fork"
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

<h2 Severity="Severity.Info">
    Comando fork
</h2>

<FluentAccordion ActiveId="@activeId" OnAccordionItemChange="HandleOnAccordionItemChange">
    <FluentAccordionItem Expanded="true" Heading="Fork">
        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.CloudFlow())" Color="@Color.Neutral" Slot="start" />
        <dl>
            <dd>
                O <code>fork</code> não é um comando Git propriamente dito, mas sim uma funcionalidade oferecida por plataformas como GitHub, GitLab e Bitbucket. Ele permite criar uma cópia de um repositório de outro usuário na sua conta, mantendo o vínculo com o repositório original.
            </dd>
            <dt>
                <strong>Quando usar?</strong>:
            </dt>
            <dd>
                Quando você deseja contribuir para um projeto de terceiros sem acesso direto de escrita.
            </dd>
            <dd>
                Para iniciar uma versão personalizada de um projeto, mantendo uma conexão com o repositório original para possíveis futuras sincronizações.
            </dd>
        </dl>
    </FluentAccordionItem>
</FluentAccordion>

<h4 Severity="Severity.Info">
    <strong>Passos comuns após realizar o fork:</strong>
</h4>
@foreach (var card in cardContents)
{
    <FluentGrid Justify="JustifyContent.FlexStart" Style="background-color: var(--neutral-layer-3); padding: 24px;">
        <FluentCard MinimalStyle="true" Height="auto">
            <h4>@card.Title</h4>
            <FluentGridItem Justify="JustifyContent.FlexStart" style="padding: 20px">
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Copy())" OnClick='()=>CopyText(card.Command)' />
                <FluentBadge Appearance="Appearance.Neutral" OnClick='()=>CopyText(card.Command)'>
                    @card.Command
                </FluentBadge>
            </FluentGridItem>
            <p>@card.Description</p>
        </FluentCard>
    </FluentGrid>

}
<h2 Severity="Severity.Info">
    Abrir um Pull Request
</h2>
<p>No GitHub, abra um pull request do seu repositório fork para o repositório original, solicitando a integração das suas alterações.</p>

@code {

    List<CardContent> cardContents = new()
        {
            new (){Title = "Clonar o Repositório Fork", Command="git clone <url-do-seu-fork>", Description= "Clona o repositório fork para sua máquina local."},
            new (){Title = "Configurar o Repositório Original como Upstream", Command="git remote add upstream <url-do-repositorio-original>", Description= "Adiciona o repositório original (upstream) como uma remote para manter o fork atualizado com as mudanças do repositório original."},
            new (){Title = "Buscar Atualizações do Repositório Upstream", Command="git fetch upstream", Description= "Busca as atualizações do repositório upstream."},
            new (){Title = "Mesclar Atualizações do Upstream na sua Branch Principal", Command="git checkout main\ngit merge upstream/main", Description= "Mescla as atualizações do repositório upstream na sua branch principal."},
            new (){Title = "Criar uma Nova Branch para Fazer Alterações", Command="git checkout -b minha-nova-branch", Description= "Cria uma nova branch para realizar suas alterações."},
            new (){Title = "Fazer Alterações no Código", Command="", Description= "Faça as alterações necessárias no código no seu ambiente local."},
            new (){Title = "Adicionar e Comitar as Alterações", Command="git add .\ngit commit -m \"Descrição das alterações\"", Description= "Adiciona e comita as alterações feitas no código."},
            new (){Title = "Enviar as Alterações para o Repositório Fork", Command="git push origin minha-nova-branch", Description= "Envia as alterações para o seu repositório fork no GitHub."},
        };

    public class CardContent()
    {
        public string Title = string.Empty;
        public string Command = string.Empty;
        public string Description = string.Empty;
    }

    public async Task CopyText(string command)
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", command);
        ToastService.ShowToast(ToastIntent.Success, $"[ {command} ] Copied!");
    }

    string activeId = "accordion-1";

    FluentAccordionItem? changed;

    private void HandleOnAccordionItemChange(FluentAccordionItem item)
    {
        changed = item;
    }
}