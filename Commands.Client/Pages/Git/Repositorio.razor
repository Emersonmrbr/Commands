@page "/git/repositorio"
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

<h2 Severity="Severity.Info">
    Trabalhando com Repositórios
</h2>

@foreach (var card in cardRepositorio)
{
    <FluentGrid Justify="JustifyContent.FlexStart" Style="background-color: var(--neutral-layer-3); padding: 24px;">
        <FluentCard MinimalStyle="true" Height="auto">
            <h4>@card.Title</h4>
            <FluentGridItem Justify="JustifyContent.FlexStart" style="padding: 20px">
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Copy())" OnClick='()=>CopyText(card.Command)' />
                <FluentBadge Appearance="Appearance.Neutral" OnClick='()=>CopyText(card.Command)'>
                    @card.Command
                </FluentBadge>
            </FluentGridItem>
            <p>@card.Description</p>
        </FluentCard>
    </FluentGrid>
}

<h2 Severity="Severity.Info">
    Trabalhando com Repositórios Remotos
</h2>

@foreach (var card in cardRepositorioRemoto)
{
    <FluentGrid Justify="JustifyContent.FlexStart" Style="background-color: var(--neutral-layer-3); padding: 24px;">
        <FluentCard MinimalStyle="true" Height="auto">
            <h4>@card.Title</h4>
            <FluentGridItem Justify="JustifyContent.FlexStart" style="padding: 20px">
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Copy())" OnClick='()=>CopyText(card.Command)' />
                <FluentBadge Appearance="Appearance.Neutral" OnClick='()=>CopyText(card.Command)'>
                    @card.Command
                </FluentBadge>
            </FluentGridItem>
            <p>@card.Description</p>
        </FluentCard>
    </FluentGrid>
}

<h2 Severity="Severity.Info">
    Gerenciamento de Conflitos
</h2>

@foreach (var card in cardGerenciamentoConflito)
{
    <FluentGrid Justify="JustifyContent.FlexStart" Style="background-color: var(--neutral-layer-3); padding: 24px;">
        <FluentCard MinimalStyle="true" Height="auto">
            <h4>@card.Title</h4>
            <FluentGridItem Justify="JustifyContent.FlexStart" style="padding: 20px">
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Copy())" OnClick='()=>CopyText(card.Command)' />
                <FluentBadge Appearance="Appearance.Neutral" OnClick='()=>CopyText(card.Command)'>
                    @card.Command
                </FluentBadge>
            </FluentGridItem>
            <p>@card.Description</p>
        </FluentCard>
    </FluentGrid>
}

@code {

    List<CardContent> cardRepositorio = new()
    {
        new (){Title = "Inicializar um Repositório Git", Command="git init", Description= "Inicializa um novo repositório Git vazio no diretório atual."},
        new (){Title = "Clonar um Repositório Existente", Command="git clone <url-do-repositorio>", Description= "Clona um repositório existente a partir do URL especificado."},
        new (){Title = "Adicionar Arquivos ao Staging", Command="git add [arquivo]", Description= "Adiciona o arquivo especificado ao staging, preparando-o para o commit."},
        new (){Title = "Adicionar Todos os Arquivos ao Staging", Command="git add .", Description= "Adiciona todos os arquivos modificados no diretório de trabalho ao staging."},
        new (){Title = "Comitar Arquivos no Staging", Command="git commit -m \"Mensagem do commit\"", Description= "Cria um novo commit com os arquivos que estão no staging, utilizando a mensagem fornecida."},
        new (){Title = "Verificar o Status do Repositório", Command="git status", Description= "Exibe o status do diretório de trabalho e do staging, mostrando as mudanças que foram feitas e quais arquivos estão prontos para commit."},
        new (){Title = "Mostrar o Histórico de Commits", Command="git log", Description= "Exibe o histórico de commits do repositório, mostrando cada commit com seu hash, autor, data e mensagem de commit."},
        new (){Title = "Ver as Diferenças Entre Commits", Command="git diff [commit1] [commit2]", Description= "Mostra as diferenças entre dois commits especificados, permitindo visualizar o que mudou entre eles."},
        new (){Title = "Resetar o Diretório de Trabalho para um Commit Específico", Command="git reset --hard [commit-hash]", Description= "Reseta o diretório de trabalho para o estado de um commit específico, descartando todas as mudanças feitas após aquele commit."},
        new (){Title = "Desfazer o Último Commit (Mantendo Alterações)", Command="git reset --soft HEAD~1", Description= "Desfaz o último commit, mas mantém as alterações no diretório de trabalho. Esse comando é útil se você deseja ajustar o commit anterior antes de refazê-lo."},
        new (){Title = "Desfazer o Último Commit (Descartando Alterações)", Command="git reset --hard HEAD~1", Description= "Desfaz o último commit e descarta todas as alterações feitas desde aquele commit. Use com cautela, pois as alterações serão perdidas."},
        new (){Title = "Alterar a Mensagem do Último Commit", Command="git commit --amend -m \"Nova mensagem do commit\"", Description= "Permite editar a mensagem do último commit. Use com cuidado, especialmente se o commit já foi enviado para um repositório remoto."}
    };

    List<CardContent> cardRepositorioRemoto = new()
    {
        new (){Title = "Adicionar um Repositório Remoto", Command="git remote add origin <url-do-repositorio-remoto>", Description= "Adiciona um repositório remoto com o nome especificado (geralmente 'origin')."},
        new (){Title = "Ver Repositórios Remotos", Command="git remote -v", Description= "Exibe os repositórios remotos configurados com seus URLs."},
        new (){Title = "Buscar Alterações do Repositório Remoto", Command="git fetch origin", Description= "Busca as alterações do repositório remoto, atualizando as referências locais sem mesclar mudanças."},
        new (){Title = "Mesclar Mudanças do Repositório Remoto", Command="git pull origin [branch]", Description= "Busca e mescla as mudanças da branch especificada do repositório remoto com a branch local atual."},
        new (){Title = "Enviar Commits para o Repositório Remoto", Command="git push origin [branch]", Description= "Envia os commits da branch local especificada para o repositório remoto."},
        new (){Title = "Remover um Repositório Remoto", Command="git remote remove origin", Description= "Remove a configuração do repositório remoto especificado."},
        new (){Title = "Renomear um Repositório Remoto", Command="git remote rename old-name new-name", Description= "Renomeia o repositório remoto especificado."}
    };

    List<CardContent> cardGerenciamentoConflito = new()
    {
        new (){Title = "Verificar Diferenças de Conflitos", Command="git diff", Description= "Exibe as diferenças que causam conflitos durante um merge ou rebase."},
        new (){Title = "Adicionar Arquivos Após Resolver Conflitos", Command="git add [arquivo]", Description= "Adiciona o arquivo especificado ao staging após resolver um conflito."},
        new (){Title = "Continuar um Rebase Após Resolver Conflitos", Command="git rebase --continue", Description= "Continua um rebase após resolver conflitos, aplicando os commits restantes."},
        new (){Title = "Abortar um Rebase em Caso de Conflitos", Command="git rebase --abort", Description= "Aborta um rebase em andamento, revertendo o diretório de trabalho ao estado anterior ao início do rebase."},
        new (){Title = "Abortar um Merge em Caso de Conflitos", Command="git merge --abort", Description= "Aborta um merge em andamento, revertendo o diretório de trabalho ao estado anterior ao início do merge."},
        new (){Title = "Verificar Arquivos com Conflitos", Command="git status", Description= "Exibe o status dos arquivos com conflitos que precisam ser resolvidos."},
    };

    public class CardContent()
    {
        public string Title = string.Empty;
        public string Command = string.Empty;
        public string Description = string.Empty;
    }

    public async Task CopyText(string command)
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", command);
        ToastService.ShowToast(ToastIntent.Success, $"[ {command} ] Copied!");
    }
}