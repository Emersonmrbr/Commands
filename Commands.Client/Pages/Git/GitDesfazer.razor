@page "/git/desfazer"
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

<h2 Severity="Severity.Info">
    Desfazendo Alterações
</h2>

@foreach (var card in cardContents)
{
    <FluentGrid Justify="JustifyContent.FlexStart" Style="background-color: var(--neutral-layer-3); padding: 24px;">
        <FluentCard MinimalStyle="true" Height="auto">
            <h4>@card.Title</h4>
            <FluentGridItem Justify="JustifyContent.FlexStart" style="padding: 20px">
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Copy())" OnClick='()=>CopyText(card.Command)' />
                <FluentBadge Appearance="Appearance.Neutral" OnClick='()=>CopyText(card.Command)'>
                    @card.Command
                </FluentBadge>
            </FluentGridItem>
            <p>@card.Description</p>
        </FluentCard>
    </FluentGrid>
}

@code {

    List<CardContent> cardContents = new()
    {
        new (){Title = "Desfazer alterações não commitadas", Command="git checkout -- [arquivo]", Description= "Desfaz as alterações feitas em um arquivo desde o último commit. Isso restaura o arquivo ao estado em que estava no commit anterior."},
        new (){Title = "Desfazer um commit recente", Command="git reset --soft HEAD~1", Description= "Desfaz o último commit, mas mantém as alterações no seu diretório de trabalho. Esse comando é útil se você deseja reverter rapidamente um commit, mas manter o conteúdo para ajustá-lo antes de refazer o commit."},
        new (){Title = "Desfazer um commit e suas alterações", Command="git reset --hard HEAD~1", Description= "Desfaz o último commit e todas as alterações feitas desde o commit. Use com cautela, pois as alterações serão perdidas."},
        new (){Title = "Reverter um commit específico", Command="git revert [commit-hash]", Description= "Cria um novo commit que desfaz as alterações de um commit específico. Esse comando não altera o histórico de commits, mas cria um novo commit de reversão."},
    };

    public class CardContent()
    {
        public string Title = string.Empty;
        public string Command = string.Empty;
        public string Description = string.Empty;
    }

    public async Task CopyText(string command)
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", command);
        ToastService.ShowToast(ToastIntent.Success, $"[ {command} ] Copied!");
    }
}