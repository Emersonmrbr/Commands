@page "/git/branche"
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

<h2 Severity="Severity.Info">
    Navegação e Gerenciamento de Branches
</h2>

@foreach (var card in cardContents)
{
    <FluentGrid Justify="JustifyContent.FlexStart" Style="background-color: var(--neutral-layer-3); padding: 24px;">
        <FluentCard MinimalStyle="true" Height="auto">
            <h4>@card.Title</h4>
            <FluentGridItem Justify="JustifyContent.FlexStart" style="padding: 20px">
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Copy())" OnClick='()=>CopyText(card.Command)' />
                <FluentBadge Appearance="Appearance.Neutral" OnClick='()=>CopyText(card.Command)'>
                    @card.Command
                </FluentBadge>
            </FluentGridItem>
            <p>@card.Description</p>
        </FluentCard>
    </FluentGrid>
}

@code {

    List<CardContent> cardContents = new()
    {
        new (){Title = "Mudar para uma branch específica", Command="git checkout [nome-da-branch]", Description= "Muda para uma branch específica no repositório. Se a branch não existir, o Git irá avisar que ela não foi encontrada."},
        new (){Title = "Criar e mudar para uma nova branch", Command="git checkout -b [nome-da-branch]", Description= "Cria uma nova branch e muda para ela ao mesmo tempo. Esse comando é útil para criar novas funcionalidades ou corrigir bugs em paralelo ao desenvolvimento principal."},
        new (){Title = "Comando alternativo para mudar de branch", Command="git switch [nome-da-branch]", Description= "Alternativa ao comando git checkout para mudar de branch. O comando switch é considerado mais intuitivo e foi introduzido em versões mais recentes do Git."},
        new (){Title = "Voltar para um estado anterior do repositório", Command="git checkout [commit]", Description= "Reverte o repositório para um estado anterior especificado por um commit. O repositório volta para o estado exato de como estava nesse commit."},
        new (){Title = "Reverter um arquivo para o estado do último commit", Command="git checkout -- [arquivo]", Description= "Reverte um arquivo para o estado do último commit, descartando as alterações feitas no arquivo desde o último commit."},
        new (){Title = "Listar branches", Command="git branch", Description= "Lista todas as branches locais no repositório. A branch atual será marcada com um asterisco (*)."},
        new (){Title = "Excluir uma branch", Command="git branch -d [nome-da-branch]", Description= "Exclui a branch especificada. O Git irá avisar se há commits que ainda não foram mesclados, prevenindo a exclusão acidental de trabalho não mesclado."},
        new (){Title = "Forçar exclusão de uma branch", Command="git branch -D [nome-da-branch]", Description= "Força a exclusão da branch especificada, mesmo que haja commits não mesclados. Use com cuidado, pois isso pode levar à perda de trabalho."},
        new (){Title = "Renomear uma branch", Command="git branch -m [nome-atual] [novo-nome]", Description= "Renomeia a branch atual ou uma branch especificada para um novo nome."},
        new (){Title = "Mesclar uma branch", Command="git merge [nome-da-branch]", Description= "Mescla a branch especificada com a branch atual. Esse comando é usado para combinar o trabalho realizado em diferentes branches."},
    };

    public class CardContent()
    {
        public string Title = string.Empty;
        public string Command = string.Empty;
        public string Description = string.Empty;
    }

    public async Task CopyText(string command)
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", command);
        ToastService.ShowToast(ToastIntent.Success, $"[ {command} ] Copied!");
    }
}

