@page "/git/mergerebase"
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

<h2 Severity="Severity.Info">
    Explicações dos Comandos <code>merge</code> e <code>rebase</code>
</h2>

@foreach (var card in cardContents)
{
    <FluentGrid Justify="JustifyContent.FlexStart" Style="background-color: var(--neutral-layer-3); padding: 24px;">
        <FluentCard MinimalStyle="true" Height="auto">
            <h4>@card.Title</h4>
            <FluentGridItem Justify="JustifyContent.FlexStart" style="padding: 20px">
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Copy())" OnClick='()=>CopyText(card.Command)' />
                <FluentBadge Appearance="Appearance.Neutral" OnClick='()=>CopyText(card.Command)'>
                    @card.Command
                </FluentBadge>
            </FluentGridItem>
            <p>@card.Description</p>
        </FluentCard>
    </FluentGrid>
}

<FluentAccordion ActiveId="@activeId" OnAccordionItemChange="HandleOnAccordionItemChange">
    <FluentAccordionItem Expanded="true" Heading="Branches Principais">
        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.CloudFlow())" Color="@Color.Neutral" Slot="start" />
        <dl>
            <dt>
                Diferenças Entre <code>merge</code> e <code>rebase</code>
            </dt>
            <dd>
                <strong><code>merge</code>:</strong> Mantém a história do commit intacta e cria um commit de merge.
            </dd>
            <dd>
                <strong><code>rebase</code>:</strong> Reescreve a história dos commits, aplicando-os em uma nova base, resultando em um histórico linear.
            </dd>
        </dl>
    </FluentAccordionItem>
</FluentAccordion>

<FluentAccordion ActiveId="@activeId" OnAccordionItemChange="HandleOnAccordionItemChange">
    <FluentAccordionItem Expanded="true" Heading="Branches Principais">
        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.CloudFlow())" Color="@Color.Neutral" Slot="start" />
        <dl>
            <dt>
                Quando Usar Cada Comando
            </dt>
            <dd>
                <strong>Use <code>merge</code></strong> quando a preservação da história do commit e dos commits de merge for importante.
            </dd>
            <dd>
                <strong>Use <code>rebase</code></strong> quando você deseja um histórico de commits mais limpo e linear, sem os commits de merge.
            </dd>
        </dl>
    </FluentAccordionItem>
</FluentAccordion>

@code {

    List<CardContent> cardContents = new()
    {
       new (){Title = "Mesclar uma Branch", Command="git merge [nome-da-branch]", Description= "Mescla a branch especificada com a branch atual. Esse comando é usado para combinar o trabalho realizado em diferentes branches."},
        new (){Title = "Iniciar um Merge com Mensagem", Command="git merge --no-ff -m \"Mensagem do merge\" [nome-da-branch]", Description= "Mescla a branch especificada com a branch atual usando o modo --no-ff, que cria um commit de merge com a mensagem especificada."},
        new (){Title = "Abortar um Merge em Andamento", Command="git merge --abort", Description= "Aborta um merge em andamento, revertendo o diretório de trabalho ao estado anterior ao início do merge."},
        new (){Title = "Rebase Interativo", Command="git rebase -i [base]", Description= "Inicia um rebase interativo, permitindo reorganizar, editar, ou combinar commits a partir da base especificada."},
        new (){Title = "Rebase de uma Branch", Command="git rebase [branch]", Description= "Aplica os commits da branch atual sobre a base da branch especificada, criando uma linha de commits linear."},
        new (){Title = "Continuar um Rebase após Resolver Conflitos", Command="git rebase --continue", Description= "Continua um rebase após resolver conflitos, aplicando os commits restantes."},
        new (){Title = "Pular um Commit com Conflito Durante o Rebase", Command="git rebase --skip", Description= "Pula o commit atual durante um rebase em caso de conflitos que não possam ser resolvidos."},
        new (){Title = "Abortar um Rebase em Andamento", Command="git rebase --abort", Description= "Aborta um rebase em andamento, revertendo o diretório de trabalho ao estado anterior ao início do rebase."},
        new (){Title = "Mesclar uma Branch de Feature em Develop", Command="git checkout develop\ngit merge feature/[nome-da-feature]", Description= "Mescla a branch de feature especificada com a branch develop. Esse comando é utilizado no Git Flow para integrar novas funcionalidades."},
        new (){Title = "Rebase de uma Branch de Feature em Develop", Command="git checkout feature/[nome-da-feature]\ngit rebase develop", Description= "Aplica os commits da branch de feature sobre a base da branch develop, criando uma linha de commits linear. Esse comando é utilizado no Git Flow para manter a branch de feature atualizada com as mudanças na branch develop."},
    };

    public class CardContent()
    {
        public string Title = string.Empty;
        public string Command = string.Empty;
        public string Description = string.Empty;
    }

    public async Task CopyText(string command)
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", command);
        ToastService.ShowToast(ToastIntent.Success, $"[ {command} ] Copied!");
    }

    string activeId = "accordion-1";

    FluentAccordionItem? changed;

    private void HandleOnAccordionItemChange(FluentAccordionItem item)
    {
        changed = item;
    }
}
