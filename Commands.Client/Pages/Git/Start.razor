@page "/git/inicio"
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<MudAlert Severity="Severity.Info">
    Passos iniciais para o Git
</MudAlert>

@foreach (var card in cardContents)
{
    <MudCard Elevation="25">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@card.Title</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Style="@($"color:{Colors.Gray.Darken4}; background:{Colors.Gray.Lighten5};")">
            <MudIconButton Icon="@Icons.Material.Filled.FileCopy" Color="Color.Default" OnClick='()=>CopyText(card.Command)' />
            <MudText HtmlTag="code">@card.Command</MudText>
        </MudCardContent>
        <MudCardContent>
            <MudText Typo="Typo.body2">@card.Description</MudText>
        </MudCardContent>
        <MudSpacer />
    </MudCard>

    <MudDivider />
}

@code {

        List<CardContent> cardContents = new()
    {
        new (){Title = "Inicializar um repositório Git", Command="git init", Description= "Inicializa um novo repositório Git no diretório atual."},
        new (){Title = "Adicionar arquivos ao repositório", Command="git add .", Description= "Adiciona todos os arquivos no diretório atual ao estágio (staged) para commit."},
        new (){Title = "Fazer o commit dos arquivos", Command="git commit -m \"Initial commit\"", Description= "Faz o commit dos arquivos adicionados com uma mensagem descritiva."},
        new (){Title = "Instalar a GitHub CLI no Windows", Command="winget install --id GitHub.cli", Description= "Instala a GitHub CLI no Windows."},
        new (){Title = "Instalar a GitHub CLI no macOS", Command="brew install gh", Description= "Instala a GitHub CLI no macOS."},
        new (){Title = "Instalar a GitHub CLI no Linux", Command="sudo apt install gh", Description= "Instala a GitHub CLI no Linux."},
        new (){Title = "Autenticar na GitHub CLI", Command="gh auth login", Description= "Autentica a GitHub CLI com sua conta GitHub."},
        new (){Title = "Criar um novo repositório no GitHub", Command="gh repo create your-repository --public", Description= "Cria um novo repositório no GitHub via GitHub CLI."},
        new (){Title = "Adicionar o repositório remoto", Command="git remote add origin https://github.com/your-username/your-repository.git", Description= "Adiciona o repositório remoto ao projeto local."},
        new (){Title = "Enviar os arquivos para o GitHub", Command="git push -u origin master", Description= "Envia os commits locais para o repositório remoto no GitHub."}
    };


    public class CardContent()
    {
        public string Title = string.Empty;
        public string Command = string.Empty;
        public string Description = string.Empty;
    }
    public async Task CopyText(string command)
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", command);
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
        Snackbar.Configuration.VisibleStateDuration = 1000;
        Snackbar.Configuration.HideTransitionDuration = 100;
        Snackbar.Configuration.ShowTransitionDuration = 1000;
        Snackbar.Add($"[ {command} ] Copied!");
    }
}

