@page "/git/flow"
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<MudAlert Severity="Severity.Info">
    Estratégia Git Flow / Componentes do Git Flow
</MudAlert>


<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Branches Principais</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudList T="string" ReadOnly="true">
            <MudListItem>
                <strong>main</strong>: Branch principal contendo o código estável e pronto para produção.
            </MudListItem>
            <MudListItem>
                <strong>develop</strong>: Branch de desenvolvimento com o código mais recente para integração e testes. É a base para novas funcionalidades.
            </MudListItem>
        </MudList>
    </MudCardContent>
    <MudSpacer />
</MudCard>

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Branches de Suporte</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudList T="string" ReadOnly="true">
            <MudListItem>
                <strong>Feature Branches:</strong> Destinadas ao desenvolvimento de novas funcionalidades, partem de <code>develop</code> e, ao final, são mescladas de volta em <code>develop</code>.
            </MudListItem>
            <MudListItem>
                <strong>Release Branches:</strong> Utilizadas para preparação de versões de produção. Partem de <code>develop</code> e, quando prontas, são mescladas em <code>main</code> e <code>develop</code>.
            </MudListItem>
            <MudListItem>
                <strong>Hotfix Branches:</strong> Criadas para corrigir bugs críticos em produção. Partem de <code>main</code> e, ao final, são mescladas em <code>main</code> e <code>develop</code>.
            </MudListItem>
        </MudList>
    </MudCardContent>
    <MudSpacer />
</MudCard>

<MudAlert Severity="Severity.Info">
    Sequencia do Git Flow
</MudAlert>

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">1. Inicialização do Git Flow</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudText Typo="Typo.body2">Inicializa o Git Flow no repositório configurando as branches principais (<code>main</code> e <code>develop</code>). Essa etapa é crucial para estruturar o repositório para uso do Git Flow.</MudText>
    </MudCardContent>
    <MudSpacer />
</MudCard>

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">2. Desenvolvimento de Funcionalidade (Feature)</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudText Typo="Typo.body2"><strong>Criação da Branch de Funcionalidade:</strong> Crie uma nova branch de funcionalidade a partir da branch <code>develop</code>. Esta nova branch é utilizada exclusivamente para desenvolver uma nova funcionalidade.</MudText>
        <MudText Typo="Typo.body2"><strong>Desenvolvimento e Commits:</strong> Realize o desenvolvimento da funcionalidade, fazendo commits regulares para salvar o progresso. Isso mantém as alterações organizadas e rastreáveis.</MudText>
        <MudText Typo="Typo.body2"><strong>Finalização da Funcionalidade:</strong> Quando a funcionalidade estiver completa e testada, finalize a branch de funcionalidade, mesclando-a de volta em <code>develop</code> e deletando a branch de funcionalidade.</MudText>
    </MudCardContent>
    <MudSpacer />
</MudCard>

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">3. Preparação de Release</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudText Typo="Typo.body2"><strong>Criação da Branch de Release:</strong> Quando uma série de funcionalidades estiver pronta para lançamento, crie uma branch de release a partir de <code>develop</code>. Esta branch é usada para ajustes finais e testes.</MudText>
        <MudText Typo="Typo.body2"><strong>Ajustes e Testes:</strong> Realize ajustes necessários, correções de bugs e testes para garantir que a release esteja pronta para produção.</MudText>
        <MudText Typo="Typo.body2"><strong>Finalização da Release:</strong> Quando a release estiver pronta, finalize-a, mesclando a branch de release em <code>main</code> e <code>develop</code>, marcando uma tag de versão em <code>main</code> e deletando a branch de release.</MudText>
    </MudCardContent>
    <MudSpacer />
</MudCard>

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">4. Correções de Bug de Produção (Hotfix)</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudText Typo="Typo.body2"><strong>Criação da Branch de Hotfix:</strong> Quando um bug crítico é encontrado em produção, crie uma branch de hotfix a partir de <code>main</code>. Isso permite que a correção seja desenvolvida e lançada rapidamente.</MudText>
        <MudText Typo="Typo.body2"><strong>Desenvolvimento e Commits:</strong> Realize a correção do bug, fazendo commits regulares para salvar o progresso.</MudText>
        <MudText Typo="Typo.body2"><strong>Finalização da Hotfix:</strong> Quando a correção estiver completa, finalize a branch de hotfix, mesclando-a em <code>main</code> e <code>develop</code>, marcando uma tag de versão em <code>main</code> e deletando a branch de hotfix.</MudText>
    </MudCardContent>
    <MudSpacer />
</MudCard>

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Ciclo Contínuo</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudText Typo="Typo.body2"><strong>Repetição do Ciclo:</strong> O ciclo de desenvolvimento do Git Flow é repetitivo e contínuo. Após a finalização de uma release ou hotfix, o ciclo reinicia com a criação de novas funcionalidades, seguido de preparação de novas releases e correções de bugs conforme necessário.</MudText>
    </MudCardContent>
    <MudSpacer />
</MudCard>

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Benefícios do Git Flow</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudText Typo="Typo.body2"><strong>Organização:</strong> Mantém o desenvolvimento organizado com branches claras e definidas para diferentes etapas do ciclo de vida do software.</MudText>
        <MudText Typo="Typo.body2"><strong>Isolamento:</strong> Garante que novas funcionalidades e correções de bugs sejam desenvolvidas de forma isolada, minimizando conflitos de merge e mantendo a estabilidade do código.</MudText>
        <MudText Typo="Typo.body2"><strong>Histórico Claro:</strong> Facilita a visualização do histórico de desenvolvimento com commits e tags bem definidos, permitindo um acompanhamento preciso do progresso do projeto.</MudText>
    </MudCardContent>
    <MudSpacer />
</MudCard>

@foreach (var card in cardSequenciaGitFlow)
{
    <MudCard Elevation="25">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@card.Title</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Style="@($"color:{Colors.Gray.Darken4}; background:{Colors.Gray.Lighten5};")">
            <MudIconButton Icon="@Icons.Material.Filled.FileCopy" Color="Color.Default" OnClick='()=>CopyText(card.Command)' />
            <MudText HtmlTag="code">@card.Command</MudText>
        </MudCardContent>
        <MudCardContent>
            <MudText Typo="Typo.body2">@card.Description</MudText>
        </MudCardContent>
        <MudSpacer />
    </MudCard>

    <MudDivider />
}




<MudAlert Severity="Severity.Info">
    Comandos do Git Flow
</MudAlert>
@foreach (var card in cardContents)
{
    <MudCard Elevation="25">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@card.Title</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Style="@($"color:{Colors.Gray.Darken4}; background:{Colors.Gray.Lighten5};")">
            <MudIconButton Icon="@Icons.Material.Filled.FileCopy" Color="Color.Default" OnClick='()=>CopyText(card.Command)' />
            <MudText HtmlTag="code">@card.Command</MudText>
        </MudCardContent>
        <MudCardContent>
            <MudText Typo="Typo.body2">@card.Description</MudText>
        </MudCardContent>
        <MudSpacer />
    </MudCard>

    <MudDivider />
}

@code {
    List<CardContent> cardSequenciaGitFlow = new(){
        new (){Title = "Inicializar o Git Flow no Repositório", Command="git flow init", Description= "Inicializa o Git Flow no repositório atual, configurando as branches principais (main e develop) e permitindo a personalização de nomes e parâmetros."},
        new (){Title = "Criar uma Branch de Funcionalidade (Feature)", Command="git flow feature start [nome-da-feature]", Description= "Cria uma nova branch de funcionalidade a partir de develop para o desenvolvimento de novas funcionalidades."},
        new (){Title = "Desenvolver a Funcionalidade", Command="", Description= "Faça todas as alterações necessárias na nova branch de funcionalidade criada. Isso pode incluir adição de novos arquivos, modificações de arquivos existentes e commits regulares para salvar o progresso."},
        new (){Title = "Adicionar Arquivos ao Staging", Command="git add [arquivo]", Description= "Adiciona o arquivo especificado ao staging, preparando-o para o commit."},
        new (){Title = "Comitar as Mudanças", Command="git commit -m \"Mensagem do commit explicando as mudanças\"", Description= "Cria um novo commit com os arquivos no staging, utilizando a mensagem fornecida."},
        new (){Title = "Finalizar uma Branch de Funcionalidade (Feature)", Command="git flow feature finish [nome-da-feature]", Description= "Mescla a branch de funcionalidade de volta em develop e a deleta."},
        new (){Title = "Atualizar o Repositório Remoto - Puxar", Command="git pull origin develop", Description= "Puxar as últimas mudanças do repositório remoto para garantir que seu branch de desenvolvimento esteja atualizado."},
        new (){Title = "Atualizar o Repositório Remoto - Enviar", Command="git push origin develop", Description= "Enviar as mudanças para o repositório remoto, atualizando o branch de desenvolvimento no repositório remoto."},
        new (){Title = "Adicionar uma Tag (Opcional)", Command="git tag -a [nome-da-tag] -m \"Descrição da tag\"", Description= "Cria uma tag para marcar essa versão no repositório."},
        new (){Title = "Enviar a Tag para o Repositório Remoto", Command="git push origin [nome-da-tag]", Description= "Enviar a tag criada para o repositório remoto."},
     };

    List<CardContent> cardContents = new()
    {
        new (){Title = "Iniciar o Git Flow em um Repositório", Command="git flow init", Description= "Inicializa o Git Flow no repositório atual, configurando as branches principais (main e develop) e permitindo a personalização de nomes e parâmetros."},
        new (){Title = "Criar uma Branch de Funcionalidade (Feature)", Command="git flow feature start [nome-da-feature]", Description= "Cria uma nova branch de funcionalidade a partir de develop para o desenvolvimento de novas funcionalidades."},
        new (){Title = "Finalizar uma Branch de Funcionalidade (Feature)", Command="git flow feature finish [nome-da-feature]", Description= "Mescla a branch de funcionalidade de volta em develop e a deleta."},
        new (){Title = "Criar uma Branch de Release", Command="git flow release start [versão]", Description= "Cria uma branch de release a partir de develop para preparar uma nova versão de produção."},
        new (){Title = "Finalizar uma Branch de Release", Command="git flow release finish [versão]", Description= "Mescla a branch de release em main e develop, marca uma tag de versão em main, e deleta a branch de release."},
        new (){Title = "Criar uma Branch de Hotfix", Command="git flow hotfix start [versão]", Description= "Cria uma branch de hotfix a partir de main para corrigir bugs críticos em produção."},
        new (){Title = "Finalizar uma Branch de Hotfix", Command="git flow hotfix finish [versão]", Description= "Mescla a branch de hotfix em main e develop, marca uma tag de versão em main, e deleta a branch de hotfix."},
        new (){Title = "Mesclar Atualizações do Upstream na Branch Principal", Command="git merge upstream/main", Description= "Mescla as atualizações do repositório upstream na branch principal do repositório fork."},
        new (){Title = "Reverter um Commit Específico", Command="git revert [commit-hash]", Description= "Cria um novo commit que desfaz as alterações de um commit específico, mantendo o histórico de commits intacto."},
        new (){Title = "Resetar Diretório de Trabalho para um Commit Específico", Command="git reset --hard [commit-hash]", Description= "Reseta o diretório de trabalho para o estado de um commit específico, descartando todas as mudanças feitas após aquele commit."},
        new (){Title = "Criar e Aplicar um Stash", Command="git stash push -m \"mensagem\"", Description= "Salva temporariamente todas as alterações no diretório de trabalho com uma mensagem descritiva e as aplica depois com git stash apply."},
        new (){Title = "Listar todos os Stashes", Command="git stash list", Description= "Exibe uma lista de todos os stashes salvos, com informações como a mensagem, o hash e a referência do stash."},
        new (){Title = "Mesclar uma Branch", Command="git merge [nome-da-branch]", Description= "Mescla a branch especificada com a branch atual, combinando o trabalho de diferentes branches."},
        new (){Title = "Iniciar um Rebase Interativo", Command="git rebase -i [base]", Description= "Inicia um rebase interativo, permitindo reorganizar, editar ou combinar commits a partir da base especificada."},
        new (){Title = "Abortar um Rebase em Andamento", Command="git rebase --abort", Description= "Aborta um rebase em andamento, revertendo o diretório de trabalho ao estado anterior ao início do rebase."},
        new (){Title = "Adicionar Arquivos ao Staging", Command="git add [arquivo]", Description= "Adiciona o arquivo especificado ao staging, preparando-o para o commit."},
        new (){Title = "Comitar Arquivos no Staging", Command="git commit -m \"mensagem do commit\"", Description= "Cria um novo commit com os arquivos no staging, utilizando a mensagem fornecida."},
        new (){Title = "Verificar o Status do Repositório", Command="git status", Description= "Exibe o status do diretório de trabalho e do staging, mostrando mudanças feitas e arquivos prontos para commit."},
        new (){Title = "Visualizar o Histórico de Commits", Command="git log", Description= "Exibe o histórico de commits do repositório, mostrando cada commit com seu hash, autor, data e mensagem de commit."},
        new (){Title = "Restaurar Arquivos Modificados para o Último Commit", Command="git checkout -- [arquivo]", Description= "Restaura o arquivo modificado para o estado do último commit, descartando todas as mudanças não commitadas."},

    };
    public class CardContent()
    {
        public string Title = string.Empty;
        public string Command = string.Empty;
        public string Description = string.Empty;
    }
    public async Task CopyText(string command)
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", command);
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
        Snackbar.Configuration.VisibleStateDuration = 1000;
        Snackbar.Configuration.HideTransitionDuration = 100;
        Snackbar.Configuration.ShowTransitionDuration = 1000;
        Snackbar.Add($"[ {command} ] Copied!");
    }
}