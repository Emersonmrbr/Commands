@page "/git/flow"
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

<h2 Severity="Severity.Info">
    Estratégia Git Flow / Componentes do Git Flow
</h2>


<FluentAccordion ActiveId="@activeId" OnAccordionItemChange="HandleOnAccordionItemChange">
    <FluentAccordionItem Expanded="true" Heading="Branches Principais">
        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.CloudFlow())" Color="@Color.Neutral" Slot="start" />
        <dl>
            <dt>
                <strong>main</strong>:
            </dt>
            <dd>
                Branch principal contendo o código estável e pronto para produção.
            </dd>
            <dt>
                <strong>develop</strong>:
            </dt>
            <dd>
                Branch de desenvolvimento com o código mais recente para integração e testes. É a base para novas funcionalidades.
            </dd>
        </dl>
    </FluentAccordionItem>

    <FluentAccordionItem Expanded="true" Heading="Branches de Suporte">
        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.CloudFlow())" Color="@Color.Neutral" Slot="start" />
        <dl>
            <dt>
                <strong>Feature Branches:</strong>
            </dt>
            <dl>
                Destinadas ao desenvolvimento de novas funcionalidades, partem de
                <code>develop</code> e, ao final, são mescladas de volta em
                <code>develop</code>.
            </dl>
            <dt>
                <strong>Release Branches:</strong>
            </dt>
            <dl>
                Utilizadas para preparação de versões de produção. Partem de
                <code>develop</code> e, quando prontas, são mescladas em
                <code>main</code> e
                <code>develop</code>.
            </dl>
            <dt>
                <strong>Hotfix Branches:</strong>
            </dt>
            <dl>
                Criadas para corrigir bugs críticos em produção. Partem de
                <code>main</code> e, ao final, são mescladas em
                <code>main</code> e
                <code>develop</code>.
            </dl>
        </dl>
    </FluentAccordionItem>

    <FluentAccordionItem Expanded="true" HeadingLevel="1" Heading=" Sequencia do Git Flow">
        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.CloudFlow())" Color="@Color.Neutral" Slot="start" />
        <dl>
            <dt>
                <span> 1. Inicialização do Git Flow</span>
            </dt>
            <dd>
                Inicializa o Git Flow no repositório configurando as branches principais (<code>main</code> e <code>develop</code>). Essa etapa é crucial para estruturar o repositório para uso do Git Flow.
            </dd>
            <dt>
                <span>2. Desenvolvimento de Funcionalidade (Feature)</span>
            </dt>
            <dd>
                <strong>Criação da Branch de Funcionalidade:</strong> Crie uma nova branch de funcionalidade a partir da branch <code>develop</code>. Esta nova branch é utilizada exclusivamente para desenvolver uma nova funcionalidade.
            </dd>
            <dd>
                <strong>Desenvolvimento e Commits:</strong> Realize o desenvolvimento da funcionalidade, fazendo commits regulares para salvar o progresso. Isso mantém as alterações organizadas e rastreáveis.
            </dd>
            <dd>
                <strong>Finalização da Funcionalidade:</strong> Quando a funcionalidade estiver completa e testada, finalize a branch de funcionalidade, mesclando-a de volta em <code>develop</code> e deletando a branch de funcionalidade.
            </dd>
            <dt>
                <span>3. Preparação de Release</span>
            </dt>
            <dd>
                <strong>Criação da Branch de Release:</strong> Quando uma série de funcionalidades estiver pronta para lançamento, crie uma branch de release a partir de <code>develop</code>. Esta branch é usada para ajustes finais e testes.
            </dd>
            <dd>
                <strong>Ajustes e Testes:</strong> Realize ajustes necessários, correções de bugs e testes para garantir que a release esteja pronta para produção.
            </dd>
            <dd>
                <strong>Finalização da Release:</strong> Quando a release estiver pronta, finalize-a, mesclando a branch de release em <code>main</code> e <code>develop</code>, marcando uma tag de versão em <code>main</code> e deletando a branch de release.
            </dd>
            <dt>
                <span>4. Correções de Bug de Produção (Hotfix)</span>
            </dt>
            <dd>
                <strong>Criação da Branch de Hotfix:</strong> Quando um bug crítico é encontrado em produção, crie uma branch de hotfix a partir de <code>main</code>. Isso permite que a correção seja desenvolvida e lançada rapidamente.
            </dd>
            <dd>
                <strong>Desenvolvimento e Commits:</strong> Realize a correção do bug, fazendo commits regulares para salvar o progresso.
            </dd>
            <dd>
                <strong>Finalização da Hotfix:</strong> Quando a correção estiver completa, finalize a branch de hotfix, mesclando-a em <code>main</code> e <code>develop</code>, marcando uma tag de versão em <code>main</code> e deletando a branch de hotfix.
            </dd>
        </dl>

    </FluentAccordionItem>

    <FluentAccordionItem Expanded="true" Heading="Ciclo Contínuo">
        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.CloudFlow())" Color="@Color.Neutral" Slot="start" />
        <dl>
            <dt>
                <strong>Repetição do Ciclo:</strong>
            </dt>
            <dd>
                O ciclo de desenvolvimento do Git Flow é repetitivo e contínuo. Após a finalização de uma release ou hotfix, o ciclo reinicia com a criação de novas funcionalidades, seguido de preparação de novas releases e correções de bugs conforme necessário.
            </dd>
        </dl>
    </FluentAccordionItem>

    <FluentAccordionItem Expanded="true" Heading="Benefícios do Git Flow">
        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.CloudFlow())" Color="@Color.Neutral" Slot="start" />
        <dl>
            <dt>

                <strong>Organização:</strong>
            </dt>
            <dd>
                Mantém o desenvolvimento organizado com branches claras e definidas para diferentes etapas do ciclo de vida do software.
            </dd>
            <dt>
                <strong>Isolamento:</strong>
            </dt>
            <dd>
                Garante que novas funcionalidades e correções de bugs sejam desenvolvidas de forma isolada, minimizando conflitos de merge e mantendo a estabilidade do código.
            </dd>
            <dt>
                <strong>Histórico Claro:</strong>
            </dt>
            <dd>
                Facilita a visualização do histórico de desenvolvimento com commits e tags bem definidos, permitindo um acompanhamento preciso do progresso do projeto.
            </dd>
        </dl>
    </FluentAccordionItem>

</FluentAccordion>

<h2 Severity="Severity.Info">
    Iniciar Git Flow
</h2>

@foreach (var card in cardSequenciaGitFlow)
{
    <FluentGrid Justify="JustifyContent.FlexStart" Style="background-color: var(--neutral-layer-3); padding: 24px;">
        <FluentCard MinimalStyle="true" Height="auto">
            <h4>@card.Title</h4>
            <FluentGridItem Justify="JustifyContent.FlexStart" style="padding: 20px">
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Copy())" OnClick='()=>CopyText(card.Command)' />
                <FluentBadge Appearance="Appearance.Neutral" OnClick='()=>CopyText(card.Command)'>
                    @card.Command
                </FluentBadge>
            </FluentGridItem>
            <p>@card.Description</p>
        </FluentCard>
    </FluentGrid>
}

<h2 Severity="Severity.Info">
    Criar um Hotfix
</h2>

@foreach (var card in cardSequenciaGitFlowHotFix)
{
    <FluentGrid Justify="JustifyContent.FlexStart" Style="background-color: var(--neutral-layer-3); padding: 24px;">
        <FluentCard MinimalStyle="true" Height="auto">
            <h4>@card.Title</h4>
            <FluentGridItem Justify="JustifyContent.FlexStart" style="padding: 20px">
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Copy())" OnClick='()=>CopyText(card.Command)' />
                <FluentBadge Appearance="Appearance.Neutral" OnClick='()=>CopyText(card.Command)'>
                    @card.Command
                </FluentBadge>
            </FluentGridItem>
            <p>@card.Description</p>
        </FluentCard>
    </FluentGrid>
}

<h2 Severity="Severity.Info">
    Comandos do Git Flow
</h2>
@foreach (var card in cardContents)
{
    <FluentGrid Justify="JustifyContent.FlexStart" Style="background-color: var(--neutral-layer-3); padding: 24px;">
        <FluentCard MinimalStyle="true" Height="auto">
            <h4>@card.Title</h4>
            <FluentGridItem Justify="JustifyContent.FlexStart" style="padding: 20px">
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Copy())" OnClick='()=>CopyText(card.Command)' />
                <FluentBadge Appearance="Appearance.Neutral" OnClick='()=>CopyText(card.Command)'>
                    @card.Command
                </FluentBadge>
            </FluentGridItem>
            <p>@card.Description</p>
        </FluentCard>
    </FluentGrid>
}

@code {
    List<CardContent> cardSequenciaGitFlow = new()
    {
        new (){Title = "Inicializar o Git Flow", Command="git flow init", Description= "Inicializa o Git Flow no repositório, configurando as branches padrão."},
        new (){Title = "Criar uma nova feature", Command="git flow feature start minha-feature", Description= "Cria e muda para uma nova branch de feature."},
        new (){Title = "Adicionar mudanças à feature", Command="git add .", Description= "Adiciona todas as mudanças ao estágio (staged) para commit."},
        new (){Title = "Comitar mudanças na feature", Command="git commit -m \"Descrição das mudanças\"", Description= "Faz o commit das mudanças na branch de feature com uma mensagem descritiva."},
        new (){Title = "Finalizar a feature", Command="git flow feature finish minha-feature", Description= "Finaliza a feature, mesclando na branch develop."},
        new (){Title = "Criar uma release (opcional)", Command="git flow release start 1.0.0", Description= "Inicia uma nova release branch a partir da develop."},
        new (){Title = "Adicionar mudanças à release", Command="git add .", Description= "Adiciona todas as mudanças ao estágio (staged) para commit na release."},
        new (){Title = "Comitar mudanças na release", Command="git commit -m \"Ajustes para a release 1.0.0\"", Description= "Faz o commit dos ajustes na branch de release."},
        new (){Title = "Finalizar a release", Command="git flow release finish 1.0.0", Description= "Finaliza a release, mesclando na develop e na main, criando uma tag."},
        new (){Title = "Enviar mudanças da develop para o repositório remoto", Command="git push origin develop", Description= "Envia os commits locais da branch develop para o repositório remoto."},
        new (){Title = "Deploy do código", Command="git push origin main --tags", Description= "Envia os commits locais e tags para o repositório remoto, preparando para deploy."},
    };

    List<CardContent> cardSequenciaGitFlowHotFix = new()
    {
        new (){Title = "Criar um hotfix", Command="git flow hotfix start 1.0.1", Description= "Cria e muda para uma nova branch de hotfix."},
        new (){Title = "Adicionar mudanças ao hotfix", Command="git add .", Description= "Adiciona todas as mudanças ao estágio (staged) para commit no hotfix."},
        new (){Title = "Comitar mudanças no hotfix", Command="git commit -m \"Corrigido problema crítico\"", Description= "Faz o commit das correções na branch de hotfix."},
        new (){Title = "Finalizar o hotfix", Command="git flow hotfix finish 1.0.1", Description= "Finaliza o hotfix, mesclando na develop e na main, criando uma tag."},
        new (){Title = "Deploy do hotfix", Command="git push origin main --tags", Description= "Envia os commits locais e tags do hotfix para o repositório remoto."}
    };


    List<CardContent> cardContents = new()
    {
        new (){Title = "Iniciar o Git Flow em um Repositório", Command="git flow init", Description= "Inicializa o Git Flow no repositório atual, configurando as branches principais (main e develop) e permitindo a personalização de nomes e parâmetros."},
        new (){Title = "Criar uma Branch de Funcionalidade (Feature)", Command="git flow feature start [nome-da-feature]", Description= "Cria uma nova branch de funcionalidade a partir de develop para o desenvolvimento de novas funcionalidades."},
        new (){Title = "Finalizar uma Branch de Funcionalidade (Feature)", Command="git flow feature finish [nome-da-feature]", Description= "Mescla a branch de funcionalidade de volta em develop e a deleta."},
        new (){Title = "Criar uma Branch de Release", Command="git flow release start [versão]", Description= "Cria uma branch de release a partir de develop para preparar uma nova versão de produção."},
        new (){Title = "Finalizar uma Branch de Release", Command="git flow release finish [versão]", Description= "Mescla a branch de release em main e develop, marca uma tag de versão em main, e deleta a branch de release."},
        new (){Title = "Criar uma Branch de Hotfix", Command="git flow hotfix start [versão]", Description= "Cria uma branch de hotfix a partir de main para corrigir bugs críticos em produção."},
        new (){Title = "Finalizar uma Branch de Hotfix", Command="git flow hotfix finish [versão]", Description= "Mescla a branch de hotfix em main e develop, marca uma tag de versão em main, e deleta a branch de hotfix."},
        new (){Title = "Mesclar Atualizações do Upstream na Branch Principal", Command="git merge upstream/main", Description= "Mescla as atualizações do repositório upstream na branch principal do repositório fork."},
        new (){Title = "Reverter um Commit Específico", Command="git revert [commit-hash]", Description= "Cria um novo commit que desfaz as alterações de um commit específico, mantendo o histórico de commits intacto."},
        new (){Title = "Resetar Diretório de Trabalho para um Commit Específico", Command="git reset --hard [commit-hash]", Description= "Reseta o diretório de trabalho para o estado de um commit específico, descartando todas as mudanças feitas após aquele commit."},
        new (){Title = "Criar e Aplicar um Stash", Command="git stash push -m \"mensagem\"", Description= "Salva temporariamente todas as alterações no diretório de trabalho com uma mensagem descritiva e as aplica depois com git stash apply."},
        new (){Title = "Listar todos os Stashes", Command="git stash list", Description= "Exibe uma lista de todos os stashes salvos, com informações como a mensagem, o hash e a referência do stash."},
        new (){Title = "Mesclar uma Branch", Command="git merge [nome-da-branch]", Description= "Mescla a branch especificada com a branch atual, combinando o trabalho de diferentes branches."},
        new (){Title = "Iniciar um Rebase Interativo", Command="git rebase -i [base]", Description= "Inicia um rebase interativo, permitindo reorganizar, editar ou combinar commits a partir da base especificada."},
        new (){Title = "Abortar um Rebase em Andamento", Command="git rebase --abort", Description= "Aborta um rebase em andamento, revertendo o diretório de trabalho ao estado anterior ao início do rebase."},
        new (){Title = "Adicionar Arquivos ao Staging", Command="git add [arquivo]", Description= "Adiciona o arquivo especificado ao staging, preparando-o para o commit."},
        new (){Title = "Comitar Arquivos no Staging", Command="git commit -m \"mensagem do commit\"", Description= "Cria um novo commit com os arquivos no staging, utilizando a mensagem fornecida."},
        new (){Title = "Verificar o Status do Repositório", Command="git status", Description= "Exibe o status do diretório de trabalho e do staging, mostrando mudanças feitas e arquivos prontos para commit."},
        new (){Title = "Visualizar o Histórico de Commits", Command="git log", Description= "Exibe o histórico de commits do repositório, mostrando cada commit com seu hash, autor, data e mensagem de commit."},
        new (){Title = "Restaurar Arquivos Modificados para o Último Commit", Command="git checkout -- [arquivo]", Description= "Restaura o arquivo modificado para o estado do último commit, descartando todas as mudanças não commitadas."},
    };

    public class CardContent()
    {
        public string Title = string.Empty;
        public string Command = string.Empty;
        public string Description = string.Empty;
    }

    public async Task CopyText(string command)
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", command);
        ToastService.ShowToast(ToastIntent.Success, $"[ {command} ] Copied!");
    }

    string activeId = "accordion-1";

    FluentAccordionItem? changed;

    private void HandleOnAccordionItemChange(FluentAccordionItem item)
    {
        changed = item;
    }
}
