@page "/git/flow"
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<MudAlert Severity="Severity.Info">
    Estratégia Git Flow
</MudAlert>

<MudText Typo="Typo.h6" GutterBottom="true">Componentes do Git Flow</MudText>

<MudText Typo="Typo.h6" GutterBottom="true">Branches Principais</MudText>
<MudList T="string" ReadOnly="true">
    <MudListItem>
        <strong>main</strong>: Branch principal contendo o código estável e pronto para produção.
    </MudListItem>
    <MudListItem>
        <strong>develop</strong>: Branch de desenvolvimento com o código mais recente para integração e testes. É a base para novas funcionalidades.
    </MudListItem>
</MudList>

<MudText Typo="Typo.h6" GutterBottom="true">Branches de Suporte</MudText>
<MudList T="string" ReadOnly="true">
    <MudListItem>
        <strong>Feature Branches:</strong> Destinadas ao desenvolvimento de novas funcionalidades, partem de <code>develop</code> e, ao final, são mescladas de volta em <code>develop</code>.
    </MudListItem>
    <MudListItem>
        <strong>Release Branches:</strong> Utilizadas para preparação de versões de produção. Partem de <code>develop</code> e, quando prontas, são mescladas em <code>main</code> e <code>develop</code>.
    </MudListItem>
    <MudListItem>
        <strong>Hotfix Branches:</strong> Criadas para corrigir bugs críticos em produção. Partem de <code>main</code> e, ao final, são mescladas em <code>main</code> e <code>develop</code>.
    </MudListItem>
</MudList>

<MudAlert Severity="Severity.Info">
    Comandos do Git Flow
</MudAlert>
@foreach (var card in cardContents)
{
    <MudCard Elevation="25">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@card.Title</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Style="@($"color:{Colors.Gray.Darken4}; background:{Colors.Gray.Lighten5};")">
            <MudIconButton Icon="@Icons.Material.Filled.FileCopy" Color="Color.Default" OnClick='()=>CopyText(card.Command)' />
            <MudText HtmlTag="code">@card.Command</MudText>
        </MudCardContent>
        <MudCardContent>
            <MudText Typo="Typo.body2">@card.Description</MudText>
        </MudCardContent>
        <MudSpacer />
    </MudCard>

    <MudDivider />
}

@code {

    List<CardContent> cardContents = new()
    {
        new (){Title = "Iniciar o Git Flow em um Repositório", Command="git flow init", Description= "Inicializa o Git Flow no repositório atual, configurando as branches principais (main e develop) e permitindo a personalização de nomes e parâmetros."},
        new (){Title = "Criar uma Branch de Funcionalidade (Feature)", Command="git flow feature start [nome-da-feature]", Description= "Cria uma nova branch de funcionalidade a partir de develop para o desenvolvimento de novas funcionalidades."},
        new (){Title = "Finalizar uma Branch de Funcionalidade (Feature)", Command="git flow feature finish [nome-da-feature]", Description= "Mescla a branch de funcionalidade de volta em develop e a deleta."},
        new (){Title = "Publicar uma Branch de Funcionalidade (Feature)", Command="git flow feature publish [nome-da-feature]", Description= "Publica a branch de funcionalidade em um repositório remoto para colaboração com outros desenvolvedores."},
        new (){Title = "Obter uma Branch de Funcionalidade Publicada", Command="git flow feature pull origin [nome-da-feature]", Description= "Obtem uma branch de funcionalidade publicada a partir do repositório remoto para o repositório local."},
        new (){Title = "Criar uma Branch de Release", Command="git flow release start [versão]", Description= "Cria uma branch de release a partir de develop para preparar uma nova versão de produção."},
        new (){Title = "Finalizar uma Branch de Release", Command="git flow release finish [versão]", Description= "Mescla a branch de release em main e develop, marca uma tag de versão em main, e deleta a branch de release."},
        new (){Title = "Publicar uma Branch de Release", Command="git flow release publish [versão]", Description= "Publica a branch de release em um repositório remoto para colaboração."},
        new (){Title = "Criar uma Branch de Hotfix", Command="git flow hotfix start [versão]", Description= "Cria uma branch de hotfix a partir de main para corrigir bugs críticos em produção."},
        new (){Title = "Finalizar uma Branch de Hotfix", Command="git flow hotfix finish [versão]", Description= "Mescla a branch de hotfix em main e develop, marca uma tag de versão em main, e deleta a branch de hotfix."},
    };
    public class CardContent()
    {
        public string Title = string.Empty;
        public string Command = string.Empty;
        public string Description = string.Empty;
    }
    public async Task CopyText(string command)
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", command);
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
        Snackbar.Configuration.VisibleStateDuration = 1000;
        Snackbar.Configuration.HideTransitionDuration = 100;
        Snackbar.Configuration.ShowTransitionDuration = 1000;
        Snackbar.Add($"[ {command} ] Copied!");
    }
}