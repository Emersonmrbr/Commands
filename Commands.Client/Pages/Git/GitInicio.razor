@page "/git/inicio"
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

<h2 Severity="Severity.Info">
    Passos iniciais para o Git
</h2>

@foreach (var card in cardContents)
{
    <FluentGrid Justify="JustifyContent.FlexStart" Style="background-color: var(--neutral-layer-3); padding: 24px;">
        <FluentCard MinimalStyle="true" Height="auto">
            <h4>@card.Title</h4>
            <FluentGridItem Justify="JustifyContent.FlexStart" style="padding: 20px">
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Copy())" OnClick='()=>CopyText(card.Command)' />
                <FluentBadge Appearance="Appearance.Neutral" OnClick='()=>CopyText(card.Command)'>
                    @card.Command
                </FluentBadge>
            </FluentGridItem>
            <p>@card.Description</p>
        </FluentCard>
    </FluentGrid>
}

@code {

    List<CardContent> cardContents = new()
    {
        new (){Title = "Inicializar um repositório Git", Command="git init", Description= "Inicializa um novo repositório Git no diretório atual."},
        new (){Title = "Adicionar arquivos ao repositório", Command="git add .", Description= "Adiciona todos os arquivos no diretório atual ao estágio (staged) para commit."},
        new (){Title = "Fazer o commit dos arquivos", Command="git commit -m \"Initial commit\"", Description= "Faz o commit dos arquivos adicionados com uma mensagem descritiva."},
        new (){Title = "Criar um arquivo README.md", Command="echo \"# Nome do Projeto\" >> README.md", Description= "Cria um arquivo README.md com um título inicial."},
        new (){Title = "Adicionar README.md ao repositório", Command="git add README.md", Description= "Adiciona o arquivo README.md ao estágio para commit."},
        new (){Title = "Comitar o README.md", Command="git commit -m \"Adicionar README.md\"", Description= "Registra a adição do README.md no histórico do Git."},
        new (){Title = "Instalar a GitHub CLI no Windows", Command="winget install --id GitHub.cli", Description= "Instala a GitHub CLI no Windows."},
        new (){Title = "Instalar a GitHub CLI no macOS", Command="brew install gh", Description= "Instala a GitHub CLI no macOS."},
        new (){Title = "Instalar a GitHub CLI no Linux", Command="sudo apt install gh", Description= "Instala a GitHub CLI no Linux."},
        new (){Title = "Autenticar na GitHub CLI", Command="gh auth login", Description= "Autentica a GitHub CLI com sua conta GitHub."},
        new (){Title = "Criar um novo repositório no GitHub", Command="gh repo create your-repository --public", Description= "Cria um novo repositório no GitHub via GitHub CLI."},
        new (){Title = "Adicionar o repositório remoto", Command="git remote add origin https://github.com/your-username/your-repository.git", Description= "Adiciona o repositório remoto ao projeto local."},
        new (){Title = "Enviar os arquivos para o GitHub", Command="git push -u origin master", Description= "Envia os commits locais para o repositório remoto no GitHub."}
    };

    public class CardContent()
    {
        public string Title = string.Empty;
        public string Command = string.Empty;
        public string Description = string.Empty;
    }

    public async Task CopyText(string command)
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", command);
        ToastService.ShowToast(ToastIntent.Success, $"[ {command} ] Copied!");
    }
}

