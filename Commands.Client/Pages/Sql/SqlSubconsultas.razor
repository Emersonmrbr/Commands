@page "/sql/subconsultas"
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

<h2 Severity="Severity.Info">
    Comandos de Subconsultas
</h2>

@foreach (var card in cardContents)
{
    <FluentGrid Justify="JustifyContent.FlexStart" Style="background-color: var(--neutral-layer-3); padding: 24px;">
        <FluentCard MinimalStyle="true" Height="auto">
            <h4>@card.Title</h4>
            <FluentGridItem Justify="JustifyContent.FlexStart" style="padding: 20px">
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Copy())" OnClick='()=>CopyText(card.Command)' />
                <FluentBadge Appearance="Appearance.Neutral" OnClick='()=>CopyText(card.Command)'>
                    @card.Command
                </FluentBadge>
            </FluentGridItem>
            <p>@card.Description</p>
        </FluentCard>
    </FluentGrid>
}

@code {

    List<CardContent> cardContents = new()
{
   new (){
        Title = "Subquery em SELECT",
        Command = "SELECT ColumnName1, (SELECT COUNT(*) FROM TableName2 t2 WHERE t2.RelatedID = t1.RelatedID) AS TotalRegistros FROM TableName1 t1;",
        Description = "Retorna o valor de uma coluna e a quantidade de registros relacionados utilizando subquery em SELECT."
    },
    new (){
        Title = "Subquery em WHERE",
        Command = "SELECT ColumnName1 FROM TableName1 t1 WHERE ColumnID IN (SELECT ColumnID FROM TableName2 GROUP BY ColumnID HAVING SUM(ColumnValue) > (SELECT AVG(ColumnValue) FROM TableName2));",
        Description = "Filtra registros com base em valores acima da média utilizando subquery em WHERE."
    },
    new (){
        Title = "Subquery em FROM",
        Command = "SELECT t1.ColumnName1, subquery.MediaValores FROM TableName1 t1 JOIN (SELECT RelatedID, AVG(ColumnValue) AS MediaValores FROM TableName2 GROUP BY RelatedID) subquery ON t1.RelatedID = subquery.RelatedID;",
        Description = "Calcula a média de valores em registros relacionados utilizando subquery em FROM."
    },
    new (){
        Title = "Subquery em HAVING",
        Command = "SELECT GroupColumn, SUM(ValueColumn) AS TotalValores FROM TableName GROUP BY GroupColumn HAVING SUM(ValueColumn) > (SELECT AVG(ValueColumn) FROM TableName);",
        Description = "Agrupa registros e filtra grupos com valores superiores à média utilizando subquery em HAVING."
    },
    new (){
        Title = "Subquery com EXISTS",
        Command = "SELECT ColumnName1 FROM TableName1 t1 WHERE EXISTS (SELECT 1 FROM TableName2 t2 WHERE t2.RelatedID = t1.RelatedID);",
        Description = "Verifica a existência de registros relacionados utilizando subquery com EXISTS."
    },
    new (){
        Title = "Subquery com NOT EXISTS",
        Command = "SELECT ColumnName1 FROM TableName1 t1 WHERE NOT EXISTS (SELECT 1 FROM TableName2 t2 WHERE t2.RelatedID = t1.RelatedID);",
        Description = "Verifica a ausência de registros relacionados utilizando subquery com NOT EXISTS."
    },
    new (){
        Title = "CASE em SELECT",
        Command = "SELECT ColumnName1, ColumnName2, CASE WHEN ColumnValue > 100 THEN 'Alto' WHEN ColumnValue BETWEEN 50 AND 100 THEN 'Médio' ELSE 'Baixo' END AS Classificacao FROM TableName;",
        Description = "Classifica registros com base em condições específicas utilizando CASE em SELECT."
    },
    new (){
        Title = "CASE com AGGREGATE FUNCTION",
        Command = "SELECT ColumnName1, COUNT(CASE WHEN ColumnValue > 100 THEN 1 END) AS TotalAlto, COUNT(CASE WHEN ColumnValue BETWEEN 50 AND 100 THEN 1 END) AS TotalMedio, COUNT(CASE WHEN ColumnValue < 50 THEN 1 END) AS TotalBaixo FROM TableName GROUP BY ColumnName1;",
        Description = "Conta registros de acordo com condições específicas utilizando CASE em conjunto com funções agregadas."
    },
    new (){
        Title = "CASE em ORDER BY",
        Command = "SELECT ColumnName1, ColumnName2 FROM TableName ORDER BY CASE WHEN ColumnName2 = 'Especifico' THEN 1 ELSE 2 END;",
        Description = "Ordena registros de forma condicional utilizando CASE em ORDER BY."
    },
    new (){
        Title = "CASE em WHERE",
        Command = "SELECT ColumnName1, ColumnName2 FROM TableName WHERE ColumnName3 = CASE WHEN ColumnName2 = 'Condicao' THEN 'Valor1' ELSE 'Valor2' END;",
        Description = "Aplica filtro condicional utilizando CASE em WHERE."
    },
    new (){
        Title = "Simulando DECODE com CASE",
        Command = "SELECT ColumnName1, CASE ColumnName2 WHEN 'Valor1' THEN 'Resultado1' WHEN 'Valor2' THEN 'Resultado2' ELSE 'OutroResultado' END AS Resultado FROM TableName;",
        Description = "Simula o comportamento do DECODE utilizando CASE no SQL Server."
    },
};

    public class CardContent()
    {
        public string Title = string.Empty;
        public string Command = string.Empty;
        public string Description = string.Empty;
    }

    public async Task CopyText(string command)
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", command);
        ToastService.ShowToast(ToastIntent.Success, $"[ {command} ] Copied!");
    }
}