@page "/sql/basico"
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<MudAlert Severity="Severity.Info">
    Comandos Básicos
</MudAlert>

@foreach (var card in cardContents)
{
    <MudCard Elevation="25">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@card.Title</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Style="@($"color:{Colors.Gray.Darken4}; background:{Colors.Gray.Lighten5};")">
            <MudIconButton Icon="@Icons.Material.Filled.FileCopy" Color="Color.Default" OnClick='()=>CopyText(card.Command)' />
            <MudText HtmlTag="code">@card.Command</MudText>
        </MudCardContent>
        <MudCardContent>
            <MudText Typo="Typo.body2">@card.Description</MudText>
        </MudCardContent>
        <MudSpacer />
    </MudCard>

    <MudDivider />
}

@code {

    List<CardContent> cardContents = new()
{
    new (){Title = "Selecionar Banco de Dados", Command="USE nome_do_banco;", Description="Seleciona o banco de dados 'nome_do_banco' para uso."},
    new (){Title = "Criar Tabela", Command="CREATE TABLE nome_da_tabela (id INT, nome_da_coluna1 VARCHAR(100), nome_da_coluna2 VARCHAR(100));", Description="Cria uma tabela chamada 'nome_da_tabela' com as colunas 'id', 'nome_da_coluna1' e 'nome_da_coluna2'."},
    new (){Title = "Adicionar Coluna", Command="ALTER TABLE nome_da_tabela ADD nova_coluna VARCHAR(100);", Description="Adiciona uma nova coluna chamada 'nova_coluna' à tabela 'nome_da_tabela'."},
    new (){Title = "Mostrar Estrutura da Tabela", Command="DESCRIBE nome_da_tabela;", Description="Mostra a estrutura da tabela 'nome_da_tabela', incluindo colunas, tipos de dados e restrições."},
    new (){Title = "Inserir Registro", Command="INSERT INTO nome_da_tabela (id, nome_da_coluna1, nome_da_coluna2) VALUES (1, 'valor1', 'valor2');", Description="Insere um registro na tabela 'nome_da_tabela' com id 1, 'nome_da_coluna1' com 'valor1' e 'nome_da_coluna2' com 'valor2'."},
    new (){Title = "Selecionar Todos os Registros", Command="SELECT * FROM nome_da_tabela;", Description="Retorna todos os registros e colunas da tabela 'nome_da_tabela'."},
    new (){Title = "Filtrar Registros por Valor Exato", Command="SELECT * FROM nome_da_tabela WHERE nome_da_coluna = 'valor';", Description="Retorna os registros da tabela 'nome_da_tabela' onde 'nome_da_coluna' é igual a 'valor'."},
    new (){Title = "Pesquisar por Parte do Texto", Command="SELECT * FROM nome_da_tabela WHERE nome_da_coluna LIKE '%parte_do_texto%';", Description="Realiza uma busca na tabela 'nome_da_tabela' para registros onde 'nome_da_coluna' contém a sequência de texto 'parte_do_texto'."},
    new (){Title = "Pesquisa Case-Insensitive com LOWER", Command="SELECT * FROM nome_da_tabela WHERE LOWER(nome_da_coluna) LIKE LOWER('%parte_do_texto%');", Description="Realiza uma busca case-insensitive na tabela 'nome_da_tabela' para registros onde 'nome_da_coluna' contém a sequência de texto 'parte_do_texto'."},
    new (){Title = "Pesquisa Case-Insensitive com COLLATE", Command="SELECT * FROM nome_da_tabela WHERE nome_da_coluna COLLATE Latin1_General_CI LIKE '%parte_do_texto%';", Description="Realiza uma busca case-insensitive na tabela 'nome_da_tabela', válida para SQL Server."},
    new (){Title = "Selecionar Coluna com COLLATE e LIKE", Command="SELECT nome_da_coluna FROM nome_da_tabela WHERE nome_da_coluna COLLATE Latin1_General_CI LIKE '%parte_do_texto%';", Description="Retorna apenas os valores de 'nome_da_coluna' da tabela 'nome_da_tabela' onde o conteúdo da coluna contém a sequência de texto 'parte_do_texto', ignorando diferenças entre maiúsculas e minúsculas."},
    new (){Title = "Ordenar Resultados com COLLATE", Command="SELECT * FROM nome_da_tabela ORDER BY nome_da_coluna COLLATE Latin1_General_BIN;", Description="Ordena os registros da tabela 'nome_da_tabela' por 'nome_da_coluna' de forma case-sensitive."},
    new (){Title = "Contar Registros Agrupados", Command="SELECT nome_da_coluna, COUNT(*) FROM nome_da_tabela GROUP BY nome_da_coluna;", Description="Agrupa os registros da tabela 'nome_da_tabela' por 'nome_da_coluna' e retorna o número de registros em cada grupo."},
    new (){Title = "Filtrar Grupos com HAVING", Command="SELECT nome_da_coluna, COUNT(*) FROM nome_da_tabela GROUP BY nome_da_coluna HAVING COUNT(*) > 5;", Description="Retorna os grupos da tabela 'nome_da_tabela' onde o número de registros em 'nome_da_coluna' é maior que 5."},
    new (){Title = "Atualizar Registro", Command="UPDATE nome_da_tabela SET nome_da_coluna = 'novo_valor' WHERE id = 1;", Description="Atualiza o valor de 'nome_da_coluna' para 'novo_valor' onde o id seja igual a 1."},
    new (){Title = "Deletar Registro", Command="DELETE FROM nome_da_tabela WHERE nome_da_coluna = 'valor';", Description="Remove o registro da tabela 'nome_da_tabela' onde 'nome_da_coluna' é igual a 'valor'."},
    new (){Title = "Limpar Todos os Registros", Command="TRUNCATE TABLE nome_da_tabela;", Description="Remove todos os registros da tabela 'nome_da_tabela', mas mantém sua estrutura intacta."},
    new (){Title = "Excluir Tabela", Command="DROP TABLE nome_da_tabela;", Description="Remove a tabela 'nome_da_tabela' do banco de dados."},
    new (){Title = "Conceder Permissão de Leitura", Command="GRANT SELECT ON nome_da_tabela TO usuario;", Description="Concede permissão de leitura na tabela 'nome_da_tabela' para o usuário 'usuario'."},
    new (){Title = "Revogar Permissão de Leitura", Command="REVOKE SELECT ON nome_da_tabela FROM usuario;", Description="Revoga a permissão de leitura na tabela 'nome_da_tabela' do usuário 'usuario'."},
    new (){Title = "Confirmar Transações", Command="COMMIT;", Description="Confirma as alterações realizadas em uma transação no banco de dados."},
    new (){Title = "Desfazer Transações", Command="ROLLBACK;", Description="Desfaz as alterações realizadas em uma transação no banco de dados."},
    new (){Title = "Definir Ponto de Salvamento", Command="SAVEPOINT ponto1;", Description="Define um ponto de salvamento dentro de uma transação para poder retornar a ele posteriormente."},
    new (){Title = "Exibir Tabelas", Command="SHOW TABLES;", Description="Exibe todas as tabelas disponíveis no banco de dados atual."}
};

    public class CardContent()
    {
        public string Title = string.Empty;
        public string Command = string.Empty;
        public string Description = string.Empty;
    }

    public async Task CopyText(string command)
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", command);
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
        Snackbar.Configuration.VisibleStateDuration = 1000;
        Snackbar.Configuration.HideTransitionDuration = 100;
        Snackbar.Configuration.ShowTransitionDuration = 1000;
        Snackbar.Add($"[ {command} ] Copied!");
    }
}