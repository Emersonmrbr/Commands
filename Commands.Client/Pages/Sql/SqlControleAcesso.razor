@page "/sql/controleacesso"
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<MudAlert Severity="Severity.Info">
    Comandos de Controle de Acesso e Permissões
</MudAlert>

@foreach (var card in cardContents)
{
    <MudCard Elevation="25">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@card.Title</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Style="@($"color:{Colors.Gray.Darken4}; background:{Colors.Gray.Lighten5};")">
            <MudIconButton Icon="@Icons.Material.Filled.FileCopy" Color="Color.Default" OnClick='()=>CopyText(card.Command)' />
            <MudText HtmlTag="code">@card.Command</MudText>
        </MudCardContent>
        <MudCardContent>
            <MudText Typo="Typo.body2">@card.Description</MudText>
        </MudCardContent>
        <MudSpacer />
    </MudCard>

    <MudDivider />
}

@code {

    List<CardContent> cardContents = new()
{
    new (){Title = "Conceder Permissão de Leitura", Command="GRANT SELECT ON nome_da_tabela TO usuario;", Description="Concede permissão de leitura na tabela 'nome_da_tabela' para o usuário 'usuario'."},
    new (){Title = "Revogar Permissão de Leitura", Command="REVOKE SELECT ON nome_da_tabela FROM usuario;", Description="Revoga a permissão de leitura na tabela 'nome_da_tabela' do usuário 'usuario'."},
    new (){Title = "Conceder Todas as Permissões", Command="GRANT ALL PRIVILEGES ON nome_do_banco.* TO 'nome_do_usuario'@'localhost';", Description="Concede todas as permissões no banco de dados 'nome_do_banco' para o usuário 'nome_do_usuario'."},
    new (){Title = "Revogar Todas as Permissões", Command="REVOKE ALL PRIVILEGES ON nome_do_banco.* FROM 'nome_do_usuario'@'localhost';", Description="Revoga todas as permissões no banco de dados 'nome_do_banco' do usuário 'nome_do_usuario'."},
    new (){Title = "Mostrar Permissões do Usuário", Command="SHOW GRANTS FOR 'nome_do_usuario'@'localhost';", Description="Exibe as permissões concedidas ao usuário 'nome_do_usuario'."},
    new (){Title = "Criar Usuário", Command="CREATE USER 'nome_do_usuario'@'localhost' IDENTIFIED BY 'senha';", Description="Cria um novo usuário chamado 'nome_do_usuario' com a senha especificada."},
    new (){Title = "Alterar Senha do Usuário", Command="ALTER USER 'nome_do_usuario'@'localhost' IDENTIFIED BY 'nova_senha';", Description="Altera a senha do usuário 'nome_do_usuario'."},
    new (){Title = "Excluir Usuário", Command="DROP USER 'nome_do_usuario'@'localhost';", Description="Remove o usuário 'nome_do_usuario' do banco de dados."},
};

    public class CardContent()
    {
        public string Title = string.Empty;
        public string Command = string.Empty;
        public string Description = string.Empty;
    }

    public async Task CopyText(string command)
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", command);
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
        Snackbar.Configuration.VisibleStateDuration = 1000;
        Snackbar.Configuration.HideTransitionDuration = 100;
        Snackbar.Configuration.ShowTransitionDuration = 1000;
        Snackbar.Add($"[ {command} ] Copied!");
    }
}