@page "/sql/controletransacao"
@inject IJSRuntime JSRuntime
@inject IToastService ToastService

<h2 Severity="Severity.Info">
    Comandos de Controle de Transações
</h2>

@foreach (var card in cardContents)
{
    <FluentGrid Justify="JustifyContent.FlexStart" Style="background-color: var(--neutral-layer-3); padding: 24px;">
        <FluentCard MinimalStyle="true" Height="auto">
            <h4>@card.Title</h4>
            <FluentGridItem Justify="JustifyContent.FlexStart" style="padding: 20px">
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Copy())" OnClick='()=>CopyText(card.Command)' />
                <FluentBadge Appearance="Appearance.Neutral" OnClick='()=>CopyText(card.Command)'>
                    @card.Command
                </FluentBadge>
            </FluentGridItem>
            <p>@card.Description</p>
        </FluentCard>
    </FluentGrid>
}

@code {

    List<CardContent> cardContents = new()
{
    new (){Title = "Confirmar Transações", Command="COMMIT;", Description="Confirma as alterações realizadas em uma transação no banco de dados."},
    new (){Title = "Desfazer Transações", Command="ROLLBACK;", Description="Desfaz as alterações realizadas em uma transação no banco de dados."},
    new (){Title = "Definir Ponto de Salvamento", Command="SAVEPOINT ponto1;", Description="Define um ponto de salvamento dentro de uma transação para poder retornar a ele posteriormente."},
    new (){Title = "Iniciar Transação", Command="START TRANSACTION;", Description="Inicia uma nova transação no banco de dados."},
    new (){Title = "Finalizar Transação", Command="END TRANSACTION;", Description="Finaliza a transação atual no banco de dados."},
    new (){Title = "Definir Auto-Commit", Command="SET AUTOCOMMIT = 0;", Description="Desativa o modo de auto-commit, exigindo COMMIT explícito para confirmar transações."},
};

    public class CardContent()
    {
        public string Title = string.Empty;
        public string Command = string.Empty;
        public string Description = string.Empty;
    }

    public async Task CopyText(string command)
    {
        await JSRuntime.InvokeVoidAsync("copyToClipboard", command);
        ToastService.ShowToast(ToastIntent.Success, $"[ {command} ] Copied!");
    }
}